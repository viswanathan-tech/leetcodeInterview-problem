class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        ArrayList<Integer> result = new ArrayList<>();
        HashMap<String,Integer> freq = new HashMap<>();
        for(String word:words)
        {
            freq.put(word,freq.getOrDefault(word,0)+1);
        }
        int wordLen = words[0].length();
        int totalWords = words.length;
        int totalLen = wordLen*totalWords;
        
        for(int i=0;i<=s.length()-totalLen;i++)
        {
            HashMap<String,Integer> copy = new HashMap(freq);
            String word = s.substring(i,wordLen+i);
            int sum=totalWords;
            if(copy.containsKey(word) && copy.get(word)>0)
            {
                copy.put(word,copy.get(word)-1);
                sum--;
                int j=0;
                int k=i+wordLen;
                boolean flag = true;
                while(j<sum)
                {
                    word = s.substring(k,k+wordLen);
                    if(copy.containsKey(word) && copy.get(word)>0)
                    {
                        copy.put(word,copy.get(word)-1);
                    }
                    else
                    {
                        flag=false;
                        break;
                    }
                    j++;
                    k=k+wordLen;
                }
                if(flag==true)
                {
                    result.add(i);
                }
            }
        }
        return result;
    }
}
